buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
    }
}

apply plugin: 'com.android.application'

apply from: rootProject.file('gradle/codequality.gradle')

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        versionCode 47
        versionName "1.8.7"

        minSdkVersion 11
        targetSdkVersion 25

        buildConfigField 'String', 'BUILD_TAG', '"' + getBuildTag() + '"'
        buildConfigField 'String', 'OWM_API_KEY', '"' + getOpenWeatherMapApiKey() + '"'
        buildConfigField 'boolean', 'ENABLE_WEATHER', 'true'

        def buildSuffix = getBuildSuffix(versionName, versionCode)
        applicationVariants.all { variant ->
            def file = variant.outputs[0].outputFile
            variant.outputs[0].outputFile = new File(file.parent, file.name.replace(".apk", "-" + buildSuffix + ".apk"))
        }
    }

    if (project.hasProperty('signingKeyStoreFile')) {
        signingConfigs {
            release {
                storeFile     file(signingKeyStoreFile)
                storePassword signingKeyStorePassword
                keyAlias      signingKeyAlias
                keyPassword   signingKeyPassword
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'proguard-project.txt'
            if (project.hasProperty('signingKeyStoreFile')) {
                signingConfig signingConfigs.release
            }
        }
    }

    if (rootProject.hasProperty("lintAbortOnError") && lintAbortOnError == 'false') {
        lintOptions {
            abortOnError false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

def getBuildSuffix(versionName, versionCode) {
    def suffix = versionName + '-' + versionCode
    if (System.getenv()['BUILD_NUMBER'] != null) {
        suffix += '-b' + System.getenv()['BUILD_NUMBER']
    }
    return suffix
}

def getBuildTag() {
    def tag = ''
    if (System.getenv()['BUILD_NUMBER'] != null) {
        tag += 'b' + System.getenv()['BUILD_NUMBER']
    } else {
        tag += 'l'
    }
    tag += '@' + new Date().format('yyyyMMdd')
    return tag
}

def getOpenWeatherMapApiKey() {
    if (project.hasProperty('owmApiKey')) {
        return owmApiKey
    } else {
        def apiKeyFile = file('default_owm_api_key');
        if (apiKeyFile.isFile()) {
          return apiKeyFile.text.trim()
        }
    }
    return 'NOKEY'
}

///////////////////////////////////////////////////
// Dependencies

repositories {
    jcenter()
}

dependencies{
    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'net.danlew:android.joda:2.9.4.1'
}


///////////////////////////////////////////////////
// Checkstyle

task checkstyleDebug(type: Checkstyle, dependsOn: 'compileDebugJava') {
    source = fileTree('src/main/java/')
    classpath = files('build/intermediates/classes/debug')
}
check.dependsOn checkstyleDebug


///////////////////////////////////////////////////
// Findbugs

task findbugsDebug(type: FindBugs, dependsOn: 'compileDebugJava') {
    source = fileTree('src/main/java/')
    classes = fileTree('build/intermediates/classes/debug')
    classpath = files() // empty classpath!
    effort = 'max'
    excludeFilter = rootProject.file('config/findbugs/androidExcludeFilter.xml')
}
check.dependsOn findbugsDebug

///////////////////////////////////////////////////
// PMD

task pmd(type: Pmd) {
    source = fileTree('src/main/java/')
    ruleSets = ['java-basic', 'java-braces', 'java-android']
}
check.dependsOn 'pmd'
